#!/Users/hecomi/.nodebrew/current/bin/node --harmony

var shell    = require('shell');
var app      = new shell();
var printf   = require('printf');
var execSync = require('child_process').execSync;
var settings = require('./settings').command;

var run = (res, command, script) => {

	if (script && settings.commands.indexOf(script) == -1) {
		res.red('command "' + script + '" is not exist.\n');
		res.print('available commands are:\n');
		settings.commands.forEach(script => {
			res.cyan(script + '\n');
		});
		res.prompt();
		return;
	}

	if (script === 'all') {
		settings.commands.forEach(script => {
			if (script === 'all') return;
			run(res, command, script);
		});
		return;
	}

	var cmd = '';
	if (script) {
		cmd = printf('%s %s ./services/%s.js %s', settings.app, command, script, settings.option);
	} else {
		cmd = printf('%s %s', settings.app, command, script, settings.option);
	}
	var log = execSync(cmd);
	res.blue(log);
	res.prompt();
};

app.configure(() => {
	app.use(shell.history({ shell: app }));
	app.use(shell.completer({ shell: app }));
	app.use(shell.router({ shell: app }));
	app.use(shell.help({
		shell: app,
		introduction: true
	}));
});

app.cmd('start :script', 'Start service', (req, res) => {
	run(res, 'start', req.params.script);
});

app.cmd('restart :script', 'Restart all servers', (req, res) => {
	run(res, 'restart', req.params.script);
});

app.cmd('stop :script', 'Stop all servers', (req, res) => {
	run(res, 'stop', req.params.script);
});

app.cmd('ls', 'Show all services statuses', (req, res) => {
	run(res, 'list');
});

app.cmd('kill', 'Kill all services', (req, res) => {
	run(res, 'kill');
});

app.cmd('clean', 'Clean intermediates', (req, res) => {
	execSync(printf('rm %s/*.wav', __dirname));
	res.prompt();
});
